name: Create Release

on:
  push:
    tags: [ "v*.*.*" ]

env:
  RELEASE: yes

jobs:
  tests:
    uses: ./.github/workflows/go.yml
    name: Go Tests
    secrets: inherit

  create_release:
    name: Create Release
    needs: [tests]
    runs-on: ubuntu-latest
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        prerelease: true

    - name: Output Release URL File
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt

    - name: Save Release URL File for publish
      uses: actions/upload-artifact@v4
      with:
        name: release_url
        path: release_url.txt
        retention-days: 1

  publish:
    name: Publish
    needs: [tests, create_release]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v5
      with:
        go-version: stable
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v4

    - name: Load Release URL File from release job
      uses: actions/download-artifact@v4
      with:
        name: release_url
        path: release_url

    - name: Setup Linux Dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-dev and xorg-dev

    - name: Setup Windows Dependencies
      if: runner.os == 'Windows'
      run: |
        choco install -y make mingw

    - name: Install Fyne
      run: make setup-webui

    - name: Distribute
      run: make dist

    - name: Get Release File Name & Upload URL
      id: get_release_info
      shell: bash
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}

    - name: Upload Linux Binary
      if: runner.os == 'Linux'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./bin/watchman-linux-amd64
        asset_name: watchman-linux-amd64
        asset_content_type: application/octet-stream

    - name: Upload macOS Binary
      if: runner.os == 'macOS'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./bin/watchman-darwin-amd64
        asset_name: watchman-darwin-amd64
        asset_content_type: application/octet-stream

    - name: Upload Windows Binary
      if: runner.os == 'Windows'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./bin/watchman.exe
        asset_name: watchman.exe
        asset_content_type: application/octet-stream

  docker-hub:
    name: Docker Hub
    needs: [tests, create_release]
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v5
      with:
        go-version: stable
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v4

    - name: Clean
      run: make clean

    - name: Docker Hub
      run: make docker-hub

    - name: Docker Static
      run: make docker-static

    - name: Docker Push
      run: |+
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          make release-push
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  docker-openshift:
    name: Docker Openshift
    needs: [tests, create_release]
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v5
      with:
        go-version: stable
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v4

    - name: Clean
      run: make clean

    - name: Docker Openshift
      run: make docker-openshift

    - name: Quay.io Push
      run: |+
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin quay.io
          make quay-push
      env:
        DOCKER_USERNAME: ${{ secrets.QUAY_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.QUAY_PASSWORD }}
